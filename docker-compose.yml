version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: ddotel-demo
    driver: bridge

services:
# ********************
  # Telemetry Components
  # ********************
# Jaeger
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    command:
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://prometheus:9090"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - 16686                   # Jaeger UI
      - 4317                    # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

 #tempo
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin

  # Grafana
  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    logging: *logging

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.43.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "9090:9090"
    logging: *logging

  #OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    labels:
      - logging=promtail
    restart: unless-stopped
    command: [ "--feature-gates=service.connectors", "--config=/etc/otelcol-config.yaml" ]
    volumes:
      - ./otelcollector-config.yaml:/etc/otelcol-config.yaml
    ports:
      - "8126"          # DD Trace receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - tempo
    logging: *logging

  # spring app
  petclinic:
    image: dd-apm-spring-app
    container_name: petclinic
    build:
      context: ./
      dockerfile: ./Dockerfile
      cache_from:
        - dd-apm-spring-app
    # deploy:
    #   resources:
    #     limits:
    #       memory: 20M
    # restart: unless-stopped
    ports:
      - 8080:8080
    environment:
     - DD_SERVICE=pet-clinic
     - DD_SERVICE_NAME=pet-clinic
     - DD_AGENT_HOST=otelcol
    depends_on:
      otelcol:
        condition: service_started
    logging: *logging

  # Load Generator
  loadgenerator:
    image: ghcr.io/open-telemetry/demo:1.4.0-loadgenerator
    container_name: load-generator
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    volumes:
      - ./locustfile.py:/usr/src/app/locustfile.py
    ports:
      - 8089:8089
    environment:
# Load Generator
      - LOCUST_WEB_PORT=8089
      - LOCUST_USERS=5
      - LOCUST_HOST=http://petclinic:8080
      - LOCUST_WEB_HOST=loadgenerator
      - LOCUST_AUTOSTART=true
      - LOCUST_HEADLESS=false
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://tempo:4318/v1/traces
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=loadgenerator
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    depends_on:
      - petclinic
      - grafana
      - tempo
      - otelcol
    logging: *logging
